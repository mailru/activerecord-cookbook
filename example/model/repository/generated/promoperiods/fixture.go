// Code generated by argen. DO NOT EDIT.
// This code was generated from a template.
//
// Manual changes to this file may cause unexpected behavior in your application.
// Manual changes to this file will be overwritten if the code is regenerated.
//
// Generate info: argen@v1.5.3-12-g7f6d003 (Commit: 7f6d003b)
package promoperiods

import (
	"context"
	"log"

	"gopkg.in/yaml.v3"

	"github.com/mailru/activerecord-cookbook/example/model/dictionary"
	"github.com/mailru/activerecord/pkg/activerecord"
	"github.com/mailru/activerecord/pkg/octopus"
)

func (objs PromoperiodsList) String() string {
	o, err := MarshalFixtures(objs)
	if err != nil {
		activerecord.Logger().Fatal(context.Background(), err)
	}
	return string(o)
}

type PromoperiodsFT struct {
	ID         string                 `yaml:"id"`
	Code       string                 `yaml:"code"`
	Email      string                 `yaml:"email"`
	Start      int32                  `yaml:"start"`
	Finish     *dictionary.Product    `yaml:"finish"`
	Action     string                 `yaml:"action"`
	Platform   map[string]interface{} `yaml:"platform"`
	Promobunch uint32                 `yaml:"promobunch"`
	Platforms  uint32                 `yaml:"platforms"`
	PlanID     int32                  `yaml:"plan_id"`
	PlanType   string                 `yaml:"plan_type"`
	Price      float64                `yaml:"price"`
}

func MarshalFixtures(objs []*Promoperiods) ([]byte, error) {
	fts := make([]PromoperiodsFT, 0, len(objs))
	for _, obj := range objs {
		fts = append(fts, PromoperiodsFT{
			ID:         obj.GetID(),
			Code:       obj.GetCode(),
			Email:      obj.GetEmail(),
			Start:      obj.GetStart(),
			Finish:     obj.GetFinish(),
			Action:     obj.GetAction(),
			Platform:   obj.GetPlatform(),
			Promobunch: obj.GetPromobunch(),
			Platforms:  obj.GetPlatforms(),
			PlanID:     obj.GetPlanID(),
			PlanType:   obj.GetPlanType(),
			Price:      obj.GetPrice(),
		})
	}
	return yaml.Marshal(fts)
}

func UnmarshalFixtures(source []byte) []*Promoperiods {
	var fixtures []PromoperiodsFT

	if err := yaml.Unmarshal(source, &fixtures); err != nil {
		log.Fatalf("unmarshal PromoperiodsFT fixture: %v", err)
	}

	objs := make([]*Promoperiods, 0, len(fixtures))

	for _, ft := range fixtures {

		o := New(context.Background())
		if err := o.SetID(ft.ID); err != nil {
			log.Fatalf("can't set value %v to field ID of Promoperiods fixture: %s", ft.ID, err)
		}
		if err := o.SetCode(ft.Code); err != nil {
			log.Fatalf("can't set value %v to field Code of Promoperiods fixture: %s", ft.Code, err)
		}
		if err := o.SetEmail(ft.Email); err != nil {
			log.Fatalf("can't set value %v to field Email of Promoperiods fixture: %s", ft.Email, err)
		}
		if err := o.SetStart(ft.Start); err != nil {
			log.Fatalf("can't set value %v to field Start of Promoperiods fixture: %s", ft.Start, err)
		}
		if err := o.SetFinish(ft.Finish); err != nil {
			log.Fatalf("can't set value %v to field Finish of Promoperiods fixture: %s", ft.Finish, err)
		}
		if err := o.SetAction(ft.Action); err != nil {
			log.Fatalf("can't set value %v to field Action of Promoperiods fixture: %s", ft.Action, err)
		}
		if err := o.SetPlatform(ft.Platform); err != nil {
			log.Fatalf("can't set value %v to field Platform of Promoperiods fixture: %s", ft.Platform, err)
		}
		if err := o.SetPromobunch(ft.Promobunch); err != nil {
			log.Fatalf("can't set value %v to field Promobunch of Promoperiods fixture: %s", ft.Promobunch, err)
		}
		if err := o.SetPlatforms(ft.Platforms); err != nil {
			log.Fatalf("can't set value %v to field Platforms of Promoperiods fixture: %s", ft.Platforms, err)
		}
		if err := o.SetPlanID(ft.PlanID); err != nil {
			log.Fatalf("can't set value %v to field PlanID of Promoperiods fixture: %s", ft.PlanID, err)
		}
		if err := o.SetPlanType(ft.PlanType); err != nil {
			log.Fatalf("can't set value %v to field PlanType of Promoperiods fixture: %s", ft.PlanType, err)
		}
		if err := o.SetPrice(ft.Price); err != nil {
			log.Fatalf("can't set value %v to field Price of Promoperiods fixture: %s", ft.Price, err)
		}

		objs = append(objs, o)
	}

	return objs
}

type PromoperiodsUpdateFT struct {
	ID string `yaml:"id"`

	UpdateOptions []PromoperiodsUpdateFixtureOptions `yaml:"update_options"`
}

type PromoperiodsUpdateFixtureOptions struct {
	Code *PromoperiodsCodeUpdateFixtureOption `yaml:"code"`

	Email *PromoperiodsEmailUpdateFixtureOption `yaml:"email"`

	Start *PromoperiodsStartUpdateFixtureOption `yaml:"start"`

	Finish *PromoperiodsFinishUpdateFixtureOption `yaml:"finish"`

	Action *PromoperiodsActionUpdateFixtureOption `yaml:"action"`

	Platform *PromoperiodsPlatformUpdateFixtureOption `yaml:"platform"`

	Promobunch *PromoperiodsPromobunchUpdateFixtureOption `yaml:"promobunch"`

	Platforms *PromoperiodsPlatformsUpdateFixtureOption `yaml:"platforms"`

	PlanID *PromoperiodsPlanIDUpdateFixtureOption `yaml:"plan_id"`

	PlanType *PromoperiodsPlanTypeUpdateFixtureOption `yaml:"plan_type"`

	Price *PromoperiodsPriceUpdateFixtureOption `yaml:"price"`
}

type PromoperiodsCodeUpdateFixtureOption struct {
	Value string `yaml:"set_value"`
}

type PromoperiodsEmailUpdateFixtureOption struct {
	Value string `yaml:"set_value"`
}

type PromoperiodsStartUpdateFixtureOption struct {
	Value int32 `yaml:"set_value"`
}

type PromoperiodsFinishUpdateFixtureOption struct {
	Value *dictionary.Product `yaml:"set_value"`
}

type PromoperiodsActionUpdateFixtureOption struct {
	Value string `yaml:"set_value"`
}

type PromoperiodsPlatformUpdateFixtureOption struct {
	Value map[string]interface{} `yaml:"set_value"`
}

type PromoperiodsPromobunchUpdateFixtureOption struct {
	Value uint32 `yaml:"set_value"`
}

type PromoperiodsPlatformsUpdateFixtureOption struct {
	Value uint32 `yaml:"set_value"`
}

type PromoperiodsPlanIDUpdateFixtureOption struct {
	Value int32 `yaml:"set_value"`
}

type PromoperiodsPlanTypeUpdateFixtureOption struct {
	Value string `yaml:"set_value"`
}

type PromoperiodsPriceUpdateFixtureOption struct {
	Value float64 `yaml:"set_value"`
}

func UnmarshalUpdateFixtures(source []byte) []*Promoperiods {
	var fixtures []PromoperiodsUpdateFT

	if err := yaml.Unmarshal(source, &fixtures); err != nil {
		log.Fatalf("unmarshal PromoperiodsUpdateFT fixture: %v", err)
	}

	objs := make([]*Promoperiods, 0, len(fixtures))

	for _, ft := range fixtures {
		obj := New(context.Background())

		if err := obj.SetID(ft.ID); err != nil {
			log.Fatalf("error SetID: %v", err)
		}
		obj.BaseField.Exists = true
		obj.BaseField.UpdateOps = []octopus.Ops{}

		SetFixtureUpdateOptions(obj, ft.UpdateOptions)

		objs = append(objs, obj)
	}

	return objs
}

func UnmarshalInsertReplaceFixtures(source []byte) []*Promoperiods {
	return UnmarshalFixtures(source)
}

func SetFixtureUpdateOptions(obj *Promoperiods, updateOptions []PromoperiodsUpdateFixtureOptions) {
	for priority, updateOption := range updateOptions {

		// Если опции нет, то ее нет в списке на установку
		if updateOption.Code != nil {
			if err := obj.SetCode(updateOption.Code.Value); err != nil {
				log.Fatalf("SetCode[priority: %d] error: %v", priority, err)
			}
		}

		// Если опции нет, то ее нет в списке на установку
		if updateOption.Email != nil {
			if err := obj.SetEmail(updateOption.Email.Value); err != nil {
				log.Fatalf("SetEmail[priority: %d] error: %v", priority, err)
			}
		}

		// Если опции нет, то ее нет в списке на установку
		if updateOption.Start != nil {
			if err := obj.SetStart(updateOption.Start.Value); err != nil {
				log.Fatalf("SetStart[priority: %d] error: %v", priority, err)
			}
		}

		// Если опции нет, то ее нет в списке на установку
		if updateOption.Finish != nil {
			if err := obj.SetFinish(updateOption.Finish.Value); err != nil {
				log.Fatalf("SetFinish[priority: %d] error: %v", priority, err)
			}
		}

		// Если опции нет, то ее нет в списке на установку
		if updateOption.Action != nil {
			if err := obj.SetAction(updateOption.Action.Value); err != nil {
				log.Fatalf("SetAction[priority: %d] error: %v", priority, err)
			}
		}

		// Если опции нет, то ее нет в списке на установку
		if updateOption.Platform != nil {
			if err := obj.SetPlatform(updateOption.Platform.Value); err != nil {
				log.Fatalf("SetPlatform[priority: %d] error: %v", priority, err)
			}
		}

		// Если опции нет, то ее нет в списке на установку
		if updateOption.Promobunch != nil {
			if err := obj.SetPromobunch(updateOption.Promobunch.Value); err != nil {
				log.Fatalf("SetPromobunch[priority: %d] error: %v", priority, err)
			}
		}

		// Если опции нет, то ее нет в списке на установку
		if updateOption.Platforms != nil {
			if err := obj.SetPlatforms(updateOption.Platforms.Value); err != nil {
				log.Fatalf("SetPlatforms[priority: %d] error: %v", priority, err)
			}
		}

		// Если опции нет, то ее нет в списке на установку
		if updateOption.PlanID != nil {
			if err := obj.SetPlanID(updateOption.PlanID.Value); err != nil {
				log.Fatalf("SetPlanID[priority: %d] error: %v", priority, err)
			}
		}

		// Если опции нет, то ее нет в списке на установку
		if updateOption.PlanType != nil {
			if err := obj.SetPlanType(updateOption.PlanType.Value); err != nil {
				log.Fatalf("SetPlanType[priority: %d] error: %v", priority, err)
			}
		}

		// Если опции нет, то ее нет в списке на установку
		if updateOption.Price != nil {
			if err := obj.SetPrice(updateOption.Price.Value); err != nil {
				log.Fatalf("SetPrice[priority: %d] error: %v", priority, err)
			}
		}

	}
}
